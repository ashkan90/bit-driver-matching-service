// Code generated by MockGen. DO NOT EDIT.
// Source: adapters/handler/match_handler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	request "bit-driver-matching-service/request"
	response "bit-driver-matching-service/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMatchImplementations is a mock of MatchImplementations interface.
type MockMatchImplementations struct {
	ctrl     *gomock.Controller
	recorder *MockMatchImplementationsMockRecorder
}

// MockMatchImplementationsMockRecorder is the mock recorder for MockMatchImplementations.
type MockMatchImplementationsMockRecorder struct {
	mock *MockMatchImplementations
}

// NewMockMatchImplementations creates a new mock instance.
func NewMockMatchImplementations(ctrl *gomock.Controller) *MockMatchImplementations {
	mock := &MockMatchImplementations{ctrl: ctrl}
	mock.recorder = &MockMatchImplementationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchImplementations) EXPECT() *MockMatchImplementationsMockRecorder {
	return m.recorder
}

// FindNearestDriver mocks base method.
func (m *MockMatchImplementations) FindNearestDriver(loc request.CustomerLocation) response.NearestDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearestDriver", loc)
	ret0, _ := ret[0].(response.NearestDriver)
	return ret0
}

// FindNearestDriver indicates an expected call of FindNearestDriver.
func (mr *MockMatchImplementationsMockRecorder) FindNearestDriver(loc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearestDriver", reflect.TypeOf((*MockMatchImplementations)(nil).FindNearestDriver), loc)
}
