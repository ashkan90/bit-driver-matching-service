// Code generated by MockGen. DO NOT EDIT.
// Source: domain/match/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	request "bit-driver-matching-service/request"
	response "bit-driver-matching-service/response"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryImplementation is a mock of RepositoryImplementation interface.
type MockRepositoryImplementation struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryImplementationMockRecorder
}

// MockRepositoryImplementationMockRecorder is the mock recorder for MockRepositoryImplementation.
type MockRepositoryImplementationMockRecorder struct {
	mock *MockRepositoryImplementation
}

// NewMockRepositoryImplementation creates a new mock instance.
func NewMockRepositoryImplementation(ctrl *gomock.Controller) *MockRepositoryImplementation {
	mock := &MockRepositoryImplementation{ctrl: ctrl}
	mock.recorder = &MockRepositoryImplementationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryImplementation) EXPECT() *MockRepositoryImplementationMockRecorder {
	return m.recorder
}

// FindNearest mocks base method.
func (m *MockRepositoryImplementation) FindNearest(loc request.CustomerLocation) response.NearestDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNearest", loc)
	ret0, _ := ret[0].(response.NearestDriver)
	return ret0
}

// FindNearest indicates an expected call of FindNearest.
func (mr *MockRepositoryImplementationMockRecorder) FindNearest(loc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNearest", reflect.TypeOf((*MockRepositoryImplementation)(nil).FindNearest), loc)
}
